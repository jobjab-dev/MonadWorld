generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  address   String    @unique
  tokens    Token[]
  rewards   Reward[]
  createdAt DateTime  @default(now())
  lilnads   LilnadNft[] @relation("UserNfts")
}

model Token {
  id         Int      @id @default(autoincrement())
  tokenId    String   @unique
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  rank       Int
  startTime  DateTime
  collected  Float    @default(0)
  isDead     Boolean  @default(false)
  snapshots  Snapshot[]
}

model Snapshot {
  id        Int      @id @default(autoincrement())
  token     Token    @relation(fields: [tokenIdDB], references: [id])
  tokenIdDB Int
  score     Float
  createdAt DateTime @default(now())
}

model Reward {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Float
  claimed   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model LilnadNft {
  id                   String    @id @default(cuid())
  tokenId              String
  ownerAddress         String    // Stored in lowercase
  owner                User?     @relation("UserNfts", fields: [ownerAddress], references: [address])
  contractAddress      String    // Stored in lowercase
  rank                 Int
  mintTimestamp        DateTime  // Start time of the NFT's lifecycle / score generation
  expirationTimestamp  DateTime? // Calculated time when the NFT becomes "dead"
  scorePerSecond       Float     @default(0) // Points per second from rankData cache
  metadataUri          String?   // Stored from RevealAndMint event
  lastCollectedScore   Float     @default(0) // Score accumulated for leaderboard
  lastCollectedTimestamp DateTime? // Timestamp when the score was last collected

  @@map("lilnad_nfts")
  @@index([ownerAddress])
  @@unique([contractAddress, tokenId])
}

model BlacklistedAddress {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  createdAt DateTime @default(now())
} 