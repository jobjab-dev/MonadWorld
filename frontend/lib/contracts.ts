import LilnadNFTJson from './abi/LilnadNFT.json' assert { type: 'json' }
import LoveTokenJson from './abi/LoveToken.json' assert { type: 'json' }
import DistributorJson from './abi/LoveDistributor.json' assert { type: 'json' }
import { Abi, parseEther } from 'viem'

// Helper to ensure env vars are read when this module is evaluated.
// Note: Next.js should replace these with string literals during build for client bundle.
const lilnadNftAddressFromEnv = (typeof process !== 'undefined' && process.env ? process.env.NEXT_PUBLIC_SBT : undefined) || '';
const loveAddressFromEnv = (typeof process !== 'undefined' && process.env ? process.env.NEXT_PUBLIC_LOVE : undefined) || '';
const distributorAddressFromEnv = (typeof process !== 'undefined' && process.env ? process.env.NEXT_PUBLIC_DISTRIBUTOR : undefined) || '';

// Log what this module sees when it's imported/evaluated
console.log('[contracts.ts] Initial NEXT_PUBLIC_SBT from process.env:', lilnadNftAddressFromEnv);

export const LILNAD_NFT_ADDRESS = /^0x[a-fA-F0-9]{40}$/.test(lilnadNftAddressFromEnv.trim())
  ? (lilnadNftAddressFromEnv.trim() as `0x${string}`)
  : ('' as `0x${string}`);

export const LOVE_TOKEN_ADDRESS = /^0x[a-fA-F0-9]{40}$/.test(loveAddressFromEnv.trim())
  ? (loveAddressFromEnv.trim() as `0x${string}`)
  : ('' as `0x${string}`);

export const DISTRIBUTOR_ADDRESS = /^0x[a-fA-F0-9]{40}$/.test(distributorAddressFromEnv.trim())
  ? (distributorAddressFromEnv.trim() as `0x${string}`)
  : ('' as `0x${string}`);

// Forcing a client-side log as well, to see if it differs after full hydration
if (typeof window !== 'undefined') {
  console.log('[contracts.ts] Client-side NEXT_PUBLIC_SBT:', process.env.NEXT_PUBLIC_SBT);
  console.log('[contracts.ts] Client-side LILNAD_NFT_ADDRESS value:', LILNAD_NFT_ADDRESS);
}

// ABIs generated by Hardhat artifacts (import JSON & export .abi)
// `assert { type: 'json' }` required for TS when `resolveJsonModule` is on.

export const LilnadNFTAbi = LilnadNFTJson.abi as Abi
export const LoveTokenAbi = LoveTokenJson.abi as Abi
export const DistributorAbi = DistributorJson.abi as Abi

export const MINT_FEE = parseEther('1')        // 1 MON 